// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WatchList {
  id         String   @id @default(cuid())
  userId     String
  security   Security @relation(fields: [securityId], references: [id])
  securityId String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")

  @@index([userId])
}

model Security {
  id                             String             @id @default(cuid())
  ticker                         String             @unique
  name                           String
  sector                         SecuritySectorType
  lastPrice                      Decimal?
  dailyChange                    Decimal?
  type                           SecurityType
  searchEngine                   SearchEngineType
  dailyHistoricalPrices          PriceData[]
  createdAt                      DateTime           @default(now()) @map(name: "created_at")
  updatedAt                      DateTime           @updatedAt @map(name: "updated_at")
  WatchList                      WatchList[]
  dailyHistoricalPricesUpdatedAt DateTime?

  @@index([id])
}

model PriceData {
  date       DateTime
  open       Decimal
  high       Decimal
  low        Decimal
  close      Decimal
  volume     BigInt
  security   Security @relation(fields: [securityId], references: [id], onDelete: Cascade)
  securityId String

  @@id([date, securityId])
  @@index([securityId, date])
}

enum SearchEngineType {
  YAHOO_FINANCE
  RAVA_BURSATIL
}

enum SecurityType {
  BOND
  EQUITY
}

enum SecuritySectorType {
  TECHNOLOGY
  ARGENTINA_BOND
  BASIC_MATERIALS
  COMMUNICATION_SERVICES
  FINANCIAL
  AEROSPACE
  CONSUMER_DEFENSIVE
  ENERGY
  HEALTHCARE
  REAL_STATE
  UTILITIES
  ELECTRONIC_ENTERTAINMENT
}

// NextAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End NextAuth tables
